// -*- mode: c++ -*-


#include <configurator/LXmlParser.h>
#include  <xml-parser/xml/GXmlValidator.h>
//#include <logging/LLogApi.h>
#include <configurator/LXmlEntityLogLevel.h>
#include <configurator/LXmlEntitySubSystem.h>
//#include <configurator/LCreateDefaultGenerators.h>
#include <configurator/LGeneratorLoggingSystemTests.h>
#include <configurator/LFileCreator.h>
#include <configurator/LArgumentScanner.h>
//#include <configurator/LDefinitions.h>
#include <configurator/LXMLInfo.h>
#include <utilities/version-info/GMenu.h>

#include <logging/LLogApi.h>
#include <logging/LPublisher.h>
#include <utilities/version-info/GMenu.h>
#include <utilities/GFileIOHandler.h>
#include <cmdline/GCommandLineArgument.h>
#include <cmdline/GArgument.h>
#include <utilities/GFileIOHandler.h>
#include <utilities/GSystem.h>
#include <logging/GException.h>
#include <logging/LConversion.h>

using namespace LOGMASTER;


#ifdef _W_IN32
#include <Windows.h>
#endif


#include <stdio.h>
#include <thread>
#include <chrono>
#include <optional>
#include <string>
#include <filesystem>

#include <utilities/GRandom.h>

#include <configurator/LFileCreator.h>


#include <string>
using std::string;


using namespace LOGMASTER;
using namespace CONFIGURATOR;

#include <format>


#include <format>


class file_t : public std::exception
{

};



int main(int  argc, const char** argv)
{
    //15;


    return 0;

    GMenu::Instance( )->ScanArguments(argc, argv);

    SET_LOGLEVEL("--all-off --all-warning");
    SET_LOGFORMAT("1111111");


    try
    {
        string xml = "";
        string xsd = "";

        LArgumentScanner::ScanArguments(argc, argv, xml, xsd);

        XML_ASSERT_EXCEPTION(GXmlValidator( ).IsValid(xml, xsd), "failed to validate %s against %s", xml.c_str( ), xsd.c_str( ));
        logentity_vec  loglevels;
        sysentity_vec  subsystems;
        LXmlParser( ).ParseXML(xml, xsd, loglevels, subsystems);
        XML_INFO("Successfully validated %s against %s and parsed the XML file", xml.c_str( ), xsd.c_str( ));
        auto l_system =  std::make_shared<LGeneratorLoggingSystemTests>("logging/unit-tests/commit/", "TestLConversionAutoGenerated", (LXMLInfo(xml, xsd)));

        LFileCreator( ).GenerateSingleFile(l_system, loglevels, subsystems);

    }
    catch ( const GException& e )
    {
        std::cerr << e.what( ) << endl;
    }
    catch ( const std::exception& e )
    {
        std::cerr << e.what( ) << endl;
    }
    catch ( const std::string& e )
    {
        std::cerr << e << endl;
    }
    catch ( ... )
    {
        FORCE_DEBUG("Unknown exception caught ....");
    }

    //   std::this_thread::sleep_for(std::chrono::milliseconds(10));

}

