// -*- mode: c++ -*-

/***** Auto generated file: DO NOT EDIT !!!!!! *****/
/*** Generated at: Sun 21 May-2023 05:06:21  ***/
/*** Generated from config\logging.xml **/
/*** Validated by config\logging.xsd **/

/***************************************************
* @copyright Embedded Consulting AS    2023        *
* @author Per Thomas Hille <pth@embc.no>           *
***************************************************/

/********************************************************************************
**********************************************************************************
*** This file is part of logmaster.                                           ***
*** Copyright (C)2023Per Thomas Hille <pth@embc.no>  http:///www.embc.no     ***
*** all rights reserved                                                       ***
***                                                                           ***
*** logmaster is free software: you can redistribute it and/or modify         ***
*** it under the terms of the Lesser GNU General Public License (LGPL)        ***
*** as published by the Free Software Foundation, either version 3 of the     ***
*** License, or (at your option) any later version.                           ***
***                                                                           ***
*** logmaster is distributed in the hope that it will be useful,              ***
*** but WITHOUT ANY WARRANTY; without even the implied warranty of            ***
*** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the             ***
*** GNU General Public License for more details.                              ***
***                                                                           ***
*** You should have received a copy of the Lesser GNU General Public          ***
*** License along with logmaster in the README file in the source code        ***
*** directory. If not, see <http://www.gnu.org/licenses/>.                    ***
*********************************************************************************
*********************************************************************************/

#include "TestLConversionAutoGenerated.h"
#include <logging/LConversion.h>




TEST_F(TestLConversionAutoGenerated, string2system)
{
    EXPECT_EQ(eMSGSYSTEM::SYS_EXCEPTION	, LConversion::String2System("000000010000000000000001") );
    EXPECT_EQ(eMSGSYSTEM::SYS_EXCEPTION	, LConversion::String2System("000000100000000000000001") );
    EXPECT_EQ(eMSGSYSTEM::SYS_EXCEPTION	, LConversion::String2System("000001000000000000000001") );
    EXPECT_EQ(eMSGSYSTEM::SYS_EXCEPTION	, LConversion::String2System("000010000000000000000001") );
    EXPECT_EQ(eMSGSYSTEM::SYS_EXCEPTION	, LConversion::String2System("000100000000000000000001") );
    EXPECT_EQ(eMSGSYSTEM::SYS_EXCEPTION	, LConversion::String2System("001000000000000000000001") );
    EXPECT_EQ(eMSGSYSTEM::SYS_FSM		, LConversion::String2System("000000010000000000000010") );
    EXPECT_EQ(eMSGSYSTEM::SYS_FSM		, LConversion::String2System("000000100000000000000010") );
    EXPECT_EQ(eMSGSYSTEM::SYS_FSM		, LConversion::String2System("000001000000000000000010") );
    EXPECT_EQ(eMSGSYSTEM::SYS_FSM		, LConversion::String2System("000010000000000000000010") );
    EXPECT_EQ(eMSGSYSTEM::SYS_FSM		, LConversion::String2System("000100000000000000000010") );
    EXPECT_EQ(eMSGSYSTEM::SYS_FSM		, LConversion::String2System("001000000000000000000010") );
    EXPECT_EQ(eMSGSYSTEM::SYS_MESSAGE		, LConversion::String2System("000000010000000000000100") );
    EXPECT_EQ(eMSGSYSTEM::SYS_MESSAGE		, LConversion::String2System("000000100000000000000100") );
    EXPECT_EQ(eMSGSYSTEM::SYS_MESSAGE		, LConversion::String2System("000001000000000000000100") );
    EXPECT_EQ(eMSGSYSTEM::SYS_MESSAGE		, LConversion::String2System("000010000000000000000100") );
    EXPECT_EQ(eMSGSYSTEM::SYS_MESSAGE		, LConversion::String2System("000100000000000000000100") );
    EXPECT_EQ(eMSGSYSTEM::SYS_MESSAGE		, LConversion::String2System("001000000000000000000100") );
    EXPECT_EQ(eMSGSYSTEM::SYS_COM		, LConversion::String2System("000000010000000000001000") );
    EXPECT_EQ(eMSGSYSTEM::SYS_COM		, LConversion::String2System("000000100000000000001000") );
    EXPECT_EQ(eMSGSYSTEM::SYS_COM		, LConversion::String2System("000001000000000000001000") );
    EXPECT_EQ(eMSGSYSTEM::SYS_COM		, LConversion::String2System("000010000000000000001000") );
    EXPECT_EQ(eMSGSYSTEM::SYS_COM		, LConversion::String2System("000100000000000000001000") );
    EXPECT_EQ(eMSGSYSTEM::SYS_COM		, LConversion::String2System("001000000000000000001000") );
    EXPECT_EQ(eMSGSYSTEM::SYS_XML		, LConversion::String2System("000000010000000000010000") );
    EXPECT_EQ(eMSGSYSTEM::SYS_XML		, LConversion::String2System("000000100000000000010000") );
    EXPECT_EQ(eMSGSYSTEM::SYS_XML		, LConversion::String2System("000001000000000000010000") );
    EXPECT_EQ(eMSGSYSTEM::SYS_XML		, LConversion::String2System("000010000000000000010000") );
    EXPECT_EQ(eMSGSYSTEM::SYS_XML		, LConversion::String2System("000100000000000000010000") );
    EXPECT_EQ(eMSGSYSTEM::SYS_XML		, LConversion::String2System("001000000000000000010000") );
    EXPECT_EQ(eMSGSYSTEM::SYS_DATABASE	, LConversion::String2System("000000010000000000100000") );
    EXPECT_EQ(eMSGSYSTEM::SYS_DATABASE	, LConversion::String2System("000000100000000000100000") );
    EXPECT_EQ(eMSGSYSTEM::SYS_DATABASE	, LConversion::String2System("000001000000000000100000") );
    EXPECT_EQ(eMSGSYSTEM::SYS_DATABASE	, LConversion::String2System("000010000000000000100000") );
    EXPECT_EQ(eMSGSYSTEM::SYS_DATABASE	, LConversion::String2System("000100000000000000100000") );
    EXPECT_EQ(eMSGSYSTEM::SYS_DATABASE	, LConversion::String2System("001000000000000000100000") );
    EXPECT_EQ(eMSGSYSTEM::SYS_USER		, LConversion::String2System("000000010000000001000000") );
    EXPECT_EQ(eMSGSYSTEM::SYS_USER		, LConversion::String2System("000000100000000001000000") );
    EXPECT_EQ(eMSGSYSTEM::SYS_USER		, LConversion::String2System("000001000000000001000000") );
    EXPECT_EQ(eMSGSYSTEM::SYS_USER		, LConversion::String2System("000010000000000001000000") );
    EXPECT_EQ(eMSGSYSTEM::SYS_USER		, LConversion::String2System("000100000000000001000000") );
    EXPECT_EQ(eMSGSYSTEM::SYS_USER		, LConversion::String2System("001000000000000001000000") );
    EXPECT_EQ(eMSGSYSTEM::SYS_GENERAL		, LConversion::String2System("000000010000000010000000") );
    EXPECT_EQ(eMSGSYSTEM::SYS_GENERAL		, LConversion::String2System("000000100000000010000000") );
    EXPECT_EQ(eMSGSYSTEM::SYS_GENERAL		, LConversion::String2System("000001000000000010000000") );
    EXPECT_EQ(eMSGSYSTEM::SYS_GENERAL		, LConversion::String2System("000010000000000010000000") );
    EXPECT_EQ(eMSGSYSTEM::SYS_GENERAL		, LConversion::String2System("000100000000000010000000") );
    EXPECT_EQ(eMSGSYSTEM::SYS_GENERAL		, LConversion::String2System("001000000000000010000000") );
    EXPECT_EQ(eMSGSYSTEM::SYS_ALARM		, LConversion::String2System("000000010000000100000000") );
    EXPECT_EQ(eMSGSYSTEM::SYS_ALARM		, LConversion::String2System("000000100000000100000000") );
    EXPECT_EQ(eMSGSYSTEM::SYS_ALARM		, LConversion::String2System("000001000000000100000000") );
    EXPECT_EQ(eMSGSYSTEM::SYS_ALARM		, LConversion::String2System("000010000000000100000000") );
    EXPECT_EQ(eMSGSYSTEM::SYS_ALARM		, LConversion::String2System("000100000000000100000000") );
    EXPECT_EQ(eMSGSYSTEM::SYS_ALARM		, LConversion::String2System("001000000000000100000000") );
}


