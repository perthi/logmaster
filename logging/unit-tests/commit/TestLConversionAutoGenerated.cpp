// -*- mode: c++ -*-

/***** Auto generated file: DO NOT EDIT !!!!!! *****/
/*** Generated at: Sun 21 May-2023 13:11:28  ***/
/*** Generated from config\logging.xml **/
/*** Validated by config\logging.xsd **/

/***************************************************
* @copyright Embedded Consulting AS    2023        *
* @author Per Thomas Hille <pth@embc.no>           *
***************************************************/

/********************************************************************************
*********************************************************************************
*** This file is part of logmaster.                                           ***
*** Copyright (C) 2023 Per Thomas Hille <pth@embc.no>  http:///www.embc.no    ***
*** all rights reserved                                                       ***
***                                                                           ***
*** logmaster is free software: you can redistribute it and/or modify         ***
*** it under the terms of the Lesser GNU General Public License (LGPL)        ***
*** as published by the Free Software Foundation, either version 3 of the     ***
*** License, or (at your option) any later version.                           ***
***                                                                           ***
*** logmaster is distributed in the hope that it will be useful,              ***
*** but WITHOUT ANY WARRANTY; without even the implied warranty of            ***
*** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the             ***
*** GNU General Public License for more details.                              ***
***                                                                           ***
*** You should have received a copy of the Lesser GNU General Public          ***
*** License along with logmaster in the README file in the source code        ***
*** directory. If not, see <http://www.gnu.org/licenses/>.                    ***
*********************************************************************************
*********************************************************************************/

#include "TestLConversionAutoGenerated.h"
#include <logging/LConversion.h>




TEST_F(TestLConversionAutoGenerated, string2system)
{
    EXPECT_EQ(eMSGSYSTEM::SYS_EXCEPTION	, LConversion::String2System("000000010000000000000001") );
    EXPECT_EQ(eMSGSYSTEM::SYS_EXCEPTION	, LConversion::String2System("000000100000000000000001") );
    EXPECT_EQ(eMSGSYSTEM::SYS_EXCEPTION	, LConversion::String2System("000001000000000000000001") );
    EXPECT_EQ(eMSGSYSTEM::SYS_EXCEPTION	, LConversion::String2System("000010000000000000000001") );
    EXPECT_EQ(eMSGSYSTEM::SYS_EXCEPTION	, LConversion::String2System("000100000000000000000001") );
    EXPECT_EQ(eMSGSYSTEM::SYS_EXCEPTION	, LConversion::String2System("001000000000000000000001") );
    EXPECT_EQ(eMSGSYSTEM::SYS_FSM		, LConversion::String2System("000000010000000000000010") );
    EXPECT_EQ(eMSGSYSTEM::SYS_FSM		, LConversion::String2System("000000100000000000000010") );
    EXPECT_EQ(eMSGSYSTEM::SYS_FSM		, LConversion::String2System("000001000000000000000010") );
    EXPECT_EQ(eMSGSYSTEM::SYS_FSM		, LConversion::String2System("000010000000000000000010") );
    EXPECT_EQ(eMSGSYSTEM::SYS_FSM		, LConversion::String2System("000100000000000000000010") );
    EXPECT_EQ(eMSGSYSTEM::SYS_FSM		, LConversion::String2System("001000000000000000000010") );
    EXPECT_EQ(eMSGSYSTEM::SYS_MESSAGE		, LConversion::String2System("000000010000000000000100") );
    EXPECT_EQ(eMSGSYSTEM::SYS_MESSAGE		, LConversion::String2System("000000100000000000000100") );
    EXPECT_EQ(eMSGSYSTEM::SYS_MESSAGE		, LConversion::String2System("000001000000000000000100") );
    EXPECT_EQ(eMSGSYSTEM::SYS_MESSAGE		, LConversion::String2System("000010000000000000000100") );
    EXPECT_EQ(eMSGSYSTEM::SYS_MESSAGE		, LConversion::String2System("000100000000000000000100") );
    EXPECT_EQ(eMSGSYSTEM::SYS_MESSAGE		, LConversion::String2System("001000000000000000000100") );
    EXPECT_EQ(eMSGSYSTEM::SYS_COM		, LConversion::String2System("000000010000000000001000") );
    EXPECT_EQ(eMSGSYSTEM::SYS_COM		, LConversion::String2System("000000100000000000001000") );
    EXPECT_EQ(eMSGSYSTEM::SYS_COM		, LConversion::String2System("000001000000000000001000") );
    EXPECT_EQ(eMSGSYSTEM::SYS_COM		, LConversion::String2System("000010000000000000001000") );
    EXPECT_EQ(eMSGSYSTEM::SYS_COM		, LConversion::String2System("000100000000000000001000") );
    EXPECT_EQ(eMSGSYSTEM::SYS_COM		, LConversion::String2System("001000000000000000001000") );
    EXPECT_EQ(eMSGSYSTEM::SYS_XML		, LConversion::String2System("000000010000000000010000") );
    EXPECT_EQ(eMSGSYSTEM::SYS_XML		, LConversion::String2System("000000100000000000010000") );
    EXPECT_EQ(eMSGSYSTEM::SYS_XML		, LConversion::String2System("000001000000000000010000") );
    EXPECT_EQ(eMSGSYSTEM::SYS_XML		, LConversion::String2System("000010000000000000010000") );
    EXPECT_EQ(eMSGSYSTEM::SYS_XML		, LConversion::String2System("000100000000000000010000") );
    EXPECT_EQ(eMSGSYSTEM::SYS_XML		, LConversion::String2System("001000000000000000010000") );
    EXPECT_EQ(eMSGSYSTEM::SYS_DATABASE	, LConversion::String2System("000000010000000000100000") );
    EXPECT_EQ(eMSGSYSTEM::SYS_DATABASE	, LConversion::String2System("000000100000000000100000") );
    EXPECT_EQ(eMSGSYSTEM::SYS_DATABASE	, LConversion::String2System("000001000000000000100000") );
    EXPECT_EQ(eMSGSYSTEM::SYS_DATABASE	, LConversion::String2System("000010000000000000100000") );
    EXPECT_EQ(eMSGSYSTEM::SYS_DATABASE	, LConversion::String2System("000100000000000000100000") );
    EXPECT_EQ(eMSGSYSTEM::SYS_DATABASE	, LConversion::String2System("001000000000000000100000") );
    EXPECT_EQ(eMSGSYSTEM::SYS_USER		, LConversion::String2System("000000010000000001000000") );
    EXPECT_EQ(eMSGSYSTEM::SYS_USER		, LConversion::String2System("000000100000000001000000") );
    EXPECT_EQ(eMSGSYSTEM::SYS_USER		, LConversion::String2System("000001000000000001000000") );
    EXPECT_EQ(eMSGSYSTEM::SYS_USER		, LConversion::String2System("000010000000000001000000") );
    EXPECT_EQ(eMSGSYSTEM::SYS_USER		, LConversion::String2System("000100000000000001000000") );
    EXPECT_EQ(eMSGSYSTEM::SYS_USER		, LConversion::String2System("001000000000000001000000") );
    EXPECT_EQ(eMSGSYSTEM::SYS_GENERAL		, LConversion::String2System("000000010000000010000000") );
    EXPECT_EQ(eMSGSYSTEM::SYS_GENERAL		, LConversion::String2System("000000100000000010000000") );
    EXPECT_EQ(eMSGSYSTEM::SYS_GENERAL		, LConversion::String2System("000001000000000010000000") );
    EXPECT_EQ(eMSGSYSTEM::SYS_GENERAL		, LConversion::String2System("000010000000000010000000") );
    EXPECT_EQ(eMSGSYSTEM::SYS_GENERAL		, LConversion::String2System("000100000000000010000000") );
    EXPECT_EQ(eMSGSYSTEM::SYS_GENERAL		, LConversion::String2System("001000000000000010000000") );
    EXPECT_EQ(eMSGSYSTEM::SYS_ALARM		, LConversion::String2System("000000010000000100000000") );
    EXPECT_EQ(eMSGSYSTEM::SYS_ALARM		, LConversion::String2System("000000100000000100000000") );
    EXPECT_EQ(eMSGSYSTEM::SYS_ALARM		, LConversion::String2System("000001000000000100000000") );
    EXPECT_EQ(eMSGSYSTEM::SYS_ALARM		, LConversion::String2System("000010000000000100000000") );
    EXPECT_EQ(eMSGSYSTEM::SYS_ALARM		, LConversion::String2System("000100000000000100000000") );
    EXPECT_EQ(eMSGSYSTEM::SYS_ALARM		, LConversion::String2System("001000000000000100000000") );
}


TEST_F(TestLConversionAutoGenerated, bin2system)
{
    EXPECT_EQ(eMSGSYSTEM::SYS_EXCEPTION	, LConversion::BinaryString2System("000000010000000000000001") );
    EXPECT_EQ(eMSGSYSTEM::SYS_EXCEPTION	, LConversion::BinaryString2System("000000100000000000000001") );
    EXPECT_EQ(eMSGSYSTEM::SYS_EXCEPTION	, LConversion::BinaryString2System("000001000000000000000001") );
    EXPECT_EQ(eMSGSYSTEM::SYS_EXCEPTION	, LConversion::BinaryString2System("000010000000000000000001") );
    EXPECT_EQ(eMSGSYSTEM::SYS_EXCEPTION	, LConversion::BinaryString2System("000100000000000000000001") );
    EXPECT_EQ(eMSGSYSTEM::SYS_EXCEPTION	, LConversion::BinaryString2System("001000000000000000000001") );
    EXPECT_EQ(eMSGSYSTEM::SYS_FSM		, LConversion::BinaryString2System("000000010000000000000010") );
    EXPECT_EQ(eMSGSYSTEM::SYS_FSM		, LConversion::BinaryString2System("000000100000000000000010") );
    EXPECT_EQ(eMSGSYSTEM::SYS_FSM		, LConversion::BinaryString2System("000001000000000000000010") );
    EXPECT_EQ(eMSGSYSTEM::SYS_FSM		, LConversion::BinaryString2System("000010000000000000000010") );
    EXPECT_EQ(eMSGSYSTEM::SYS_FSM		, LConversion::BinaryString2System("000100000000000000000010") );
    EXPECT_EQ(eMSGSYSTEM::SYS_FSM		, LConversion::BinaryString2System("001000000000000000000010") );
    EXPECT_EQ(eMSGSYSTEM::SYS_MESSAGE		, LConversion::BinaryString2System("000000010000000000000100") );
    EXPECT_EQ(eMSGSYSTEM::SYS_MESSAGE		, LConversion::BinaryString2System("000000100000000000000100") );
    EXPECT_EQ(eMSGSYSTEM::SYS_MESSAGE		, LConversion::BinaryString2System("000001000000000000000100") );
    EXPECT_EQ(eMSGSYSTEM::SYS_MESSAGE		, LConversion::BinaryString2System("000010000000000000000100") );
    EXPECT_EQ(eMSGSYSTEM::SYS_MESSAGE		, LConversion::BinaryString2System("000100000000000000000100") );
    EXPECT_EQ(eMSGSYSTEM::SYS_MESSAGE		, LConversion::BinaryString2System("001000000000000000000100") );
    EXPECT_EQ(eMSGSYSTEM::SYS_COM		, LConversion::BinaryString2System("000000010000000000001000") );
    EXPECT_EQ(eMSGSYSTEM::SYS_COM		, LConversion::BinaryString2System("000000100000000000001000") );
    EXPECT_EQ(eMSGSYSTEM::SYS_COM		, LConversion::BinaryString2System("000001000000000000001000") );
    EXPECT_EQ(eMSGSYSTEM::SYS_COM		, LConversion::BinaryString2System("000010000000000000001000") );
    EXPECT_EQ(eMSGSYSTEM::SYS_COM		, LConversion::BinaryString2System("000100000000000000001000") );
    EXPECT_EQ(eMSGSYSTEM::SYS_COM		, LConversion::BinaryString2System("001000000000000000001000") );
    EXPECT_EQ(eMSGSYSTEM::SYS_XML		, LConversion::BinaryString2System("000000010000000000010000") );
    EXPECT_EQ(eMSGSYSTEM::SYS_XML		, LConversion::BinaryString2System("000000100000000000010000") );
    EXPECT_EQ(eMSGSYSTEM::SYS_XML		, LConversion::BinaryString2System("000001000000000000010000") );
    EXPECT_EQ(eMSGSYSTEM::SYS_XML		, LConversion::BinaryString2System("000010000000000000010000") );
    EXPECT_EQ(eMSGSYSTEM::SYS_XML		, LConversion::BinaryString2System("000100000000000000010000") );
    EXPECT_EQ(eMSGSYSTEM::SYS_XML		, LConversion::BinaryString2System("001000000000000000010000") );
    EXPECT_EQ(eMSGSYSTEM::SYS_DATABASE	, LConversion::BinaryString2System("000000010000000000100000") );
    EXPECT_EQ(eMSGSYSTEM::SYS_DATABASE	, LConversion::BinaryString2System("000000100000000000100000") );
    EXPECT_EQ(eMSGSYSTEM::SYS_DATABASE	, LConversion::BinaryString2System("000001000000000000100000") );
    EXPECT_EQ(eMSGSYSTEM::SYS_DATABASE	, LConversion::BinaryString2System("000010000000000000100000") );
    EXPECT_EQ(eMSGSYSTEM::SYS_DATABASE	, LConversion::BinaryString2System("000100000000000000100000") );
    EXPECT_EQ(eMSGSYSTEM::SYS_DATABASE	, LConversion::BinaryString2System("001000000000000000100000") );
    EXPECT_EQ(eMSGSYSTEM::SYS_USER		, LConversion::BinaryString2System("000000010000000001000000") );
    EXPECT_EQ(eMSGSYSTEM::SYS_USER		, LConversion::BinaryString2System("000000100000000001000000") );
    EXPECT_EQ(eMSGSYSTEM::SYS_USER		, LConversion::BinaryString2System("000001000000000001000000") );
    EXPECT_EQ(eMSGSYSTEM::SYS_USER		, LConversion::BinaryString2System("000010000000000001000000") );
    EXPECT_EQ(eMSGSYSTEM::SYS_USER		, LConversion::BinaryString2System("000100000000000001000000") );
    EXPECT_EQ(eMSGSYSTEM::SYS_USER		, LConversion::BinaryString2System("001000000000000001000000") );
    EXPECT_EQ(eMSGSYSTEM::SYS_GENERAL		, LConversion::BinaryString2System("000000010000000010000000") );
    EXPECT_EQ(eMSGSYSTEM::SYS_GENERAL		, LConversion::BinaryString2System("000000100000000010000000") );
    EXPECT_EQ(eMSGSYSTEM::SYS_GENERAL		, LConversion::BinaryString2System("000001000000000010000000") );
    EXPECT_EQ(eMSGSYSTEM::SYS_GENERAL		, LConversion::BinaryString2System("000010000000000010000000") );
    EXPECT_EQ(eMSGSYSTEM::SYS_GENERAL		, LConversion::BinaryString2System("000100000000000010000000") );
    EXPECT_EQ(eMSGSYSTEM::SYS_GENERAL		, LConversion::BinaryString2System("001000000000000010000000") );
    EXPECT_EQ(eMSGSYSTEM::SYS_ALARM		, LConversion::BinaryString2System("000000010000000100000000") );
    EXPECT_EQ(eMSGSYSTEM::SYS_ALARM		, LConversion::BinaryString2System("000000100000000100000000") );
    EXPECT_EQ(eMSGSYSTEM::SYS_ALARM		, LConversion::BinaryString2System("000001000000000100000000") );
    EXPECT_EQ(eMSGSYSTEM::SYS_ALARM		, LConversion::BinaryString2System("000010000000000100000000") );
    EXPECT_EQ(eMSGSYSTEM::SYS_ALARM		, LConversion::BinaryString2System("000100000000000100000000") );
    EXPECT_EQ(eMSGSYSTEM::SYS_ALARM		, LConversion::BinaryString2System("001000000000000100000000") );
}


TEST_F(TestLConversionAutoGenerated, string2system_hex)
{
    EXPECT_EQ(eMSGSYSTEM::SYS_EXCEPTION	, LConversion::String2System("0x010001") );
    EXPECT_EQ(eMSGSYSTEM::SYS_EXCEPTION	, LConversion::String2System("0x020001") );
    EXPECT_EQ(eMSGSYSTEM::SYS_EXCEPTION	, LConversion::String2System("0x040001") );
    EXPECT_EQ(eMSGSYSTEM::SYS_EXCEPTION	, LConversion::String2System("0x080001") );
    EXPECT_EQ(eMSGSYSTEM::SYS_EXCEPTION	, LConversion::String2System("0x100001") );
    EXPECT_EQ(eMSGSYSTEM::SYS_EXCEPTION	, LConversion::String2System("0x200001") );
    EXPECT_EQ(eMSGSYSTEM::SYS_FSM		, LConversion::String2System("0x010002") );
    EXPECT_EQ(eMSGSYSTEM::SYS_FSM		, LConversion::String2System("0x020002") );
    EXPECT_EQ(eMSGSYSTEM::SYS_FSM		, LConversion::String2System("0x040002") );
    EXPECT_EQ(eMSGSYSTEM::SYS_FSM		, LConversion::String2System("0x080002") );
    EXPECT_EQ(eMSGSYSTEM::SYS_FSM		, LConversion::String2System("0x100002") );
    EXPECT_EQ(eMSGSYSTEM::SYS_FSM		, LConversion::String2System("0x200002") );
    EXPECT_EQ(eMSGSYSTEM::SYS_MESSAGE		, LConversion::String2System("0x010004") );
    EXPECT_EQ(eMSGSYSTEM::SYS_MESSAGE		, LConversion::String2System("0x020004") );
    EXPECT_EQ(eMSGSYSTEM::SYS_MESSAGE		, LConversion::String2System("0x040004") );
    EXPECT_EQ(eMSGSYSTEM::SYS_MESSAGE		, LConversion::String2System("0x080004") );
    EXPECT_EQ(eMSGSYSTEM::SYS_MESSAGE		, LConversion::String2System("0x100004") );
    EXPECT_EQ(eMSGSYSTEM::SYS_MESSAGE		, LConversion::String2System("0x200004") );
    EXPECT_EQ(eMSGSYSTEM::SYS_COM		, LConversion::String2System("0x010008") );
    EXPECT_EQ(eMSGSYSTEM::SYS_COM		, LConversion::String2System("0x020008") );
    EXPECT_EQ(eMSGSYSTEM::SYS_COM		, LConversion::String2System("0x040008") );
    EXPECT_EQ(eMSGSYSTEM::SYS_COM		, LConversion::String2System("0x080008") );
    EXPECT_EQ(eMSGSYSTEM::SYS_COM		, LConversion::String2System("0x100008") );
    EXPECT_EQ(eMSGSYSTEM::SYS_COM		, LConversion::String2System("0x200008") );
    EXPECT_EQ(eMSGSYSTEM::SYS_XML		, LConversion::String2System("0x010010") );
    EXPECT_EQ(eMSGSYSTEM::SYS_XML		, LConversion::String2System("0x020010") );
    EXPECT_EQ(eMSGSYSTEM::SYS_XML		, LConversion::String2System("0x040010") );
    EXPECT_EQ(eMSGSYSTEM::SYS_XML		, LConversion::String2System("0x080010") );
    EXPECT_EQ(eMSGSYSTEM::SYS_XML		, LConversion::String2System("0x100010") );
    EXPECT_EQ(eMSGSYSTEM::SYS_XML		, LConversion::String2System("0x200010") );
    EXPECT_EQ(eMSGSYSTEM::SYS_DATABASE	, LConversion::String2System("0x010020") );
    EXPECT_EQ(eMSGSYSTEM::SYS_DATABASE	, LConversion::String2System("0x020020") );
    EXPECT_EQ(eMSGSYSTEM::SYS_DATABASE	, LConversion::String2System("0x040020") );
    EXPECT_EQ(eMSGSYSTEM::SYS_DATABASE	, LConversion::String2System("0x080020") );
    EXPECT_EQ(eMSGSYSTEM::SYS_DATABASE	, LConversion::String2System("0x100020") );
    EXPECT_EQ(eMSGSYSTEM::SYS_DATABASE	, LConversion::String2System("0x200020") );
    EXPECT_EQ(eMSGSYSTEM::SYS_USER		, LConversion::String2System("0x010040") );
    EXPECT_EQ(eMSGSYSTEM::SYS_USER		, LConversion::String2System("0x020040") );
    EXPECT_EQ(eMSGSYSTEM::SYS_USER		, LConversion::String2System("0x040040") );
    EXPECT_EQ(eMSGSYSTEM::SYS_USER		, LConversion::String2System("0x080040") );
    EXPECT_EQ(eMSGSYSTEM::SYS_USER		, LConversion::String2System("0x100040") );
    EXPECT_EQ(eMSGSYSTEM::SYS_USER		, LConversion::String2System("0x200040") );
    EXPECT_EQ(eMSGSYSTEM::SYS_GENERAL		, LConversion::String2System("0x010080") );
    EXPECT_EQ(eMSGSYSTEM::SYS_GENERAL		, LConversion::String2System("0x020080") );
    EXPECT_EQ(eMSGSYSTEM::SYS_GENERAL		, LConversion::String2System("0x040080") );
    EXPECT_EQ(eMSGSYSTEM::SYS_GENERAL		, LConversion::String2System("0x080080") );
    EXPECT_EQ(eMSGSYSTEM::SYS_GENERAL		, LConversion::String2System("0x100080") );
    EXPECT_EQ(eMSGSYSTEM::SYS_GENERAL		, LConversion::String2System("0x200080") );
    EXPECT_EQ(eMSGSYSTEM::SYS_ALARM		, LConversion::String2System("0x010100") );
    EXPECT_EQ(eMSGSYSTEM::SYS_ALARM		, LConversion::String2System("0x020100") );
    EXPECT_EQ(eMSGSYSTEM::SYS_ALARM		, LConversion::String2System("0x040100") );
    EXPECT_EQ(eMSGSYSTEM::SYS_ALARM		, LConversion::String2System("0x080100") );
    EXPECT_EQ(eMSGSYSTEM::SYS_ALARM		, LConversion::String2System("0x100100") );
    EXPECT_EQ(eMSGSYSTEM::SYS_ALARM		, LConversion::String2System("0x200100") );
}


TEST_F(TestLConversionAutoGenerated, hex2system)
{
    EXPECT_EQ(eMSGSYSTEM::SYS_EXCEPTION	, LConversion::HexString2System("0x010001") );
    EXPECT_EQ(eMSGSYSTEM::SYS_EXCEPTION	, LConversion::HexString2System("0x020001") );
    EXPECT_EQ(eMSGSYSTEM::SYS_EXCEPTION	, LConversion::HexString2System("0x040001") );
    EXPECT_EQ(eMSGSYSTEM::SYS_EXCEPTION	, LConversion::HexString2System("0x080001") );
    EXPECT_EQ(eMSGSYSTEM::SYS_EXCEPTION	, LConversion::HexString2System("0x100001") );
    EXPECT_EQ(eMSGSYSTEM::SYS_EXCEPTION	, LConversion::HexString2System("0x200001") );
    EXPECT_EQ(eMSGSYSTEM::SYS_FSM		, LConversion::HexString2System("0x010002") );
    EXPECT_EQ(eMSGSYSTEM::SYS_FSM		, LConversion::HexString2System("0x020002") );
    EXPECT_EQ(eMSGSYSTEM::SYS_FSM		, LConversion::HexString2System("0x040002") );
    EXPECT_EQ(eMSGSYSTEM::SYS_FSM		, LConversion::HexString2System("0x080002") );
    EXPECT_EQ(eMSGSYSTEM::SYS_FSM		, LConversion::HexString2System("0x100002") );
    EXPECT_EQ(eMSGSYSTEM::SYS_FSM		, LConversion::HexString2System("0x200002") );
    EXPECT_EQ(eMSGSYSTEM::SYS_MESSAGE		, LConversion::HexString2System("0x010004") );
    EXPECT_EQ(eMSGSYSTEM::SYS_MESSAGE		, LConversion::HexString2System("0x020004") );
    EXPECT_EQ(eMSGSYSTEM::SYS_MESSAGE		, LConversion::HexString2System("0x040004") );
    EXPECT_EQ(eMSGSYSTEM::SYS_MESSAGE		, LConversion::HexString2System("0x080004") );
    EXPECT_EQ(eMSGSYSTEM::SYS_MESSAGE		, LConversion::HexString2System("0x100004") );
    EXPECT_EQ(eMSGSYSTEM::SYS_MESSAGE		, LConversion::HexString2System("0x200004") );
    EXPECT_EQ(eMSGSYSTEM::SYS_COM		, LConversion::HexString2System("0x010008") );
    EXPECT_EQ(eMSGSYSTEM::SYS_COM		, LConversion::HexString2System("0x020008") );
    EXPECT_EQ(eMSGSYSTEM::SYS_COM		, LConversion::HexString2System("0x040008") );
    EXPECT_EQ(eMSGSYSTEM::SYS_COM		, LConversion::HexString2System("0x080008") );
    EXPECT_EQ(eMSGSYSTEM::SYS_COM		, LConversion::HexString2System("0x100008") );
    EXPECT_EQ(eMSGSYSTEM::SYS_COM		, LConversion::HexString2System("0x200008") );
    EXPECT_EQ(eMSGSYSTEM::SYS_XML		, LConversion::HexString2System("0x010010") );
    EXPECT_EQ(eMSGSYSTEM::SYS_XML		, LConversion::HexString2System("0x020010") );
    EXPECT_EQ(eMSGSYSTEM::SYS_XML		, LConversion::HexString2System("0x040010") );
    EXPECT_EQ(eMSGSYSTEM::SYS_XML		, LConversion::HexString2System("0x080010") );
    EXPECT_EQ(eMSGSYSTEM::SYS_XML		, LConversion::HexString2System("0x100010") );
    EXPECT_EQ(eMSGSYSTEM::SYS_XML		, LConversion::HexString2System("0x200010") );
    EXPECT_EQ(eMSGSYSTEM::SYS_DATABASE	, LConversion::HexString2System("0x010020") );
    EXPECT_EQ(eMSGSYSTEM::SYS_DATABASE	, LConversion::HexString2System("0x020020") );
    EXPECT_EQ(eMSGSYSTEM::SYS_DATABASE	, LConversion::HexString2System("0x040020") );
    EXPECT_EQ(eMSGSYSTEM::SYS_DATABASE	, LConversion::HexString2System("0x080020") );
    EXPECT_EQ(eMSGSYSTEM::SYS_DATABASE	, LConversion::HexString2System("0x100020") );
    EXPECT_EQ(eMSGSYSTEM::SYS_DATABASE	, LConversion::HexString2System("0x200020") );
    EXPECT_EQ(eMSGSYSTEM::SYS_USER		, LConversion::HexString2System("0x010040") );
    EXPECT_EQ(eMSGSYSTEM::SYS_USER		, LConversion::HexString2System("0x020040") );
    EXPECT_EQ(eMSGSYSTEM::SYS_USER		, LConversion::HexString2System("0x040040") );
    EXPECT_EQ(eMSGSYSTEM::SYS_USER		, LConversion::HexString2System("0x080040") );
    EXPECT_EQ(eMSGSYSTEM::SYS_USER		, LConversion::HexString2System("0x100040") );
    EXPECT_EQ(eMSGSYSTEM::SYS_USER		, LConversion::HexString2System("0x200040") );
    EXPECT_EQ(eMSGSYSTEM::SYS_GENERAL		, LConversion::HexString2System("0x010080") );
    EXPECT_EQ(eMSGSYSTEM::SYS_GENERAL		, LConversion::HexString2System("0x020080") );
    EXPECT_EQ(eMSGSYSTEM::SYS_GENERAL		, LConversion::HexString2System("0x040080") );
    EXPECT_EQ(eMSGSYSTEM::SYS_GENERAL		, LConversion::HexString2System("0x080080") );
    EXPECT_EQ(eMSGSYSTEM::SYS_GENERAL		, LConversion::HexString2System("0x100080") );
    EXPECT_EQ(eMSGSYSTEM::SYS_GENERAL		, LConversion::HexString2System("0x200080") );
    EXPECT_EQ(eMSGSYSTEM::SYS_ALARM		, LConversion::HexString2System("0x010100") );
    EXPECT_EQ(eMSGSYSTEM::SYS_ALARM		, LConversion::HexString2System("0x020100") );
    EXPECT_EQ(eMSGSYSTEM::SYS_ALARM		, LConversion::HexString2System("0x040100") );
    EXPECT_EQ(eMSGSYSTEM::SYS_ALARM		, LConversion::HexString2System("0x080100") );
    EXPECT_EQ(eMSGSYSTEM::SYS_ALARM		, LConversion::HexString2System("0x100100") );
    EXPECT_EQ(eMSGSYSTEM::SYS_ALARM		, LConversion::HexString2System("0x200100") );
}


TEST_F(TestLConversionAutoGenerated, string2system_hash)
{
    EXPECT_EQ(eMSGSYSTEM::SYS_EXCEPTION	, LConversion::String2System("--exception-fatal") );
    EXPECT_EQ(eMSGSYSTEM::SYS_EXCEPTION	, LConversion::String2System("--ex-fatal") );
    EXPECT_EQ(eMSGSYSTEM::SYS_EXCEPTION	, LConversion::String2System("--exception-error") );
    EXPECT_EQ(eMSGSYSTEM::SYS_EXCEPTION	, LConversion::String2System("--ex-error") );
    EXPECT_EQ(eMSGSYSTEM::SYS_EXCEPTION	, LConversion::String2System("--exception-warning") );
    EXPECT_EQ(eMSGSYSTEM::SYS_EXCEPTION	, LConversion::String2System("--ex-warning") );
    EXPECT_EQ(eMSGSYSTEM::SYS_EXCEPTION	, LConversion::String2System("--exception-info") );
    EXPECT_EQ(eMSGSYSTEM::SYS_EXCEPTION	, LConversion::String2System("--ex-info") );
    EXPECT_EQ(eMSGSYSTEM::SYS_EXCEPTION	, LConversion::String2System("--exception-debug") );
    EXPECT_EQ(eMSGSYSTEM::SYS_EXCEPTION	, LConversion::String2System("--ex-debug") );
    EXPECT_EQ(eMSGSYSTEM::SYS_EXCEPTION	, LConversion::String2System("--exception-force_debug") );
    EXPECT_EQ(eMSGSYSTEM::SYS_EXCEPTION	, LConversion::String2System("--ex-force_debug") );
    EXPECT_EQ(eMSGSYSTEM::SYS_FSM		, LConversion::String2System("--fsm-fatal") );
    EXPECT_EQ(eMSGSYSTEM::SYS_FSM		, LConversion::String2System("--fsm-error") );
    EXPECT_EQ(eMSGSYSTEM::SYS_FSM		, LConversion::String2System("--fsm-warning") );
    EXPECT_EQ(eMSGSYSTEM::SYS_FSM		, LConversion::String2System("--fsm-info") );
    EXPECT_EQ(eMSGSYSTEM::SYS_FSM		, LConversion::String2System("--fsm-debug") );
    EXPECT_EQ(eMSGSYSTEM::SYS_FSM		, LConversion::String2System("--fsm-force_debug") );
    EXPECT_EQ(eMSGSYSTEM::SYS_MESSAGE		, LConversion::String2System("--message-fatal") );
    EXPECT_EQ(eMSGSYSTEM::SYS_MESSAGE		, LConversion::String2System("--msg-fatal") );
    EXPECT_EQ(eMSGSYSTEM::SYS_MESSAGE		, LConversion::String2System("--message-error") );
    EXPECT_EQ(eMSGSYSTEM::SYS_MESSAGE		, LConversion::String2System("--msg-error") );
    EXPECT_EQ(eMSGSYSTEM::SYS_MESSAGE		, LConversion::String2System("--message-warning") );
    EXPECT_EQ(eMSGSYSTEM::SYS_MESSAGE		, LConversion::String2System("--msg-warning") );
    EXPECT_EQ(eMSGSYSTEM::SYS_MESSAGE		, LConversion::String2System("--message-info") );
    EXPECT_EQ(eMSGSYSTEM::SYS_MESSAGE		, LConversion::String2System("--msg-info") );
    EXPECT_EQ(eMSGSYSTEM::SYS_MESSAGE		, LConversion::String2System("--message-debug") );
    EXPECT_EQ(eMSGSYSTEM::SYS_MESSAGE		, LConversion::String2System("--msg-debug") );
    EXPECT_EQ(eMSGSYSTEM::SYS_MESSAGE		, LConversion::String2System("--message-force_debug") );
    EXPECT_EQ(eMSGSYSTEM::SYS_MESSAGE		, LConversion::String2System("--msg-force_debug") );
    EXPECT_EQ(eMSGSYSTEM::SYS_COM		, LConversion::String2System("--com-fatal") );
    EXPECT_EQ(eMSGSYSTEM::SYS_COM		, LConversion::String2System("--com-error") );
    EXPECT_EQ(eMSGSYSTEM::SYS_COM		, LConversion::String2System("--com-warning") );
    EXPECT_EQ(eMSGSYSTEM::SYS_COM		, LConversion::String2System("--com-info") );
    EXPECT_EQ(eMSGSYSTEM::SYS_COM		, LConversion::String2System("--com-debug") );
    EXPECT_EQ(eMSGSYSTEM::SYS_COM		, LConversion::String2System("--com-force_debug") );
    EXPECT_EQ(eMSGSYSTEM::SYS_XML		, LConversion::String2System("--xml-fatal") );
    EXPECT_EQ(eMSGSYSTEM::SYS_XML		, LConversion::String2System("--xml-error") );
    EXPECT_EQ(eMSGSYSTEM::SYS_XML		, LConversion::String2System("--xml-warning") );
    EXPECT_EQ(eMSGSYSTEM::SYS_XML		, LConversion::String2System("--xml-info") );
    EXPECT_EQ(eMSGSYSTEM::SYS_XML		, LConversion::String2System("--xml-debug") );
    EXPECT_EQ(eMSGSYSTEM::SYS_XML		, LConversion::String2System("--xml-force_debug") );
    EXPECT_EQ(eMSGSYSTEM::SYS_DATABASE	, LConversion::String2System("--database-fatal") );
    EXPECT_EQ(eMSGSYSTEM::SYS_DATABASE	, LConversion::String2System("--db-fatal") );
    EXPECT_EQ(eMSGSYSTEM::SYS_DATABASE	, LConversion::String2System("--database-error") );
    EXPECT_EQ(eMSGSYSTEM::SYS_DATABASE	, LConversion::String2System("--db-error") );
    EXPECT_EQ(eMSGSYSTEM::SYS_DATABASE	, LConversion::String2System("--database-warning") );
    EXPECT_EQ(eMSGSYSTEM::SYS_DATABASE	, LConversion::String2System("--db-warning") );
    EXPECT_EQ(eMSGSYSTEM::SYS_DATABASE	, LConversion::String2System("--database-info") );
    EXPECT_EQ(eMSGSYSTEM::SYS_DATABASE	, LConversion::String2System("--db-info") );
    EXPECT_EQ(eMSGSYSTEM::SYS_DATABASE	, LConversion::String2System("--database-debug") );
    EXPECT_EQ(eMSGSYSTEM::SYS_DATABASE	, LConversion::String2System("--db-debug") );
    EXPECT_EQ(eMSGSYSTEM::SYS_DATABASE	, LConversion::String2System("--database-force_debug") );
    EXPECT_EQ(eMSGSYSTEM::SYS_DATABASE	, LConversion::String2System("--db-force_debug") );
    EXPECT_EQ(eMSGSYSTEM::SYS_USER		, LConversion::String2System("--user-fatal") );
    EXPECT_EQ(eMSGSYSTEM::SYS_USER		, LConversion::String2System("--usr-fatal") );
    EXPECT_EQ(eMSGSYSTEM::SYS_USER		, LConversion::String2System("--user-error") );
    EXPECT_EQ(eMSGSYSTEM::SYS_USER		, LConversion::String2System("--usr-error") );
    EXPECT_EQ(eMSGSYSTEM::SYS_USER		, LConversion::String2System("--user-warning") );
    EXPECT_EQ(eMSGSYSTEM::SYS_USER		, LConversion::String2System("--usr-warning") );
    EXPECT_EQ(eMSGSYSTEM::SYS_USER		, LConversion::String2System("--user-info") );
    EXPECT_EQ(eMSGSYSTEM::SYS_USER		, LConversion::String2System("--usr-info") );
    EXPECT_EQ(eMSGSYSTEM::SYS_USER		, LConversion::String2System("--user-debug") );
    EXPECT_EQ(eMSGSYSTEM::SYS_USER		, LConversion::String2System("--usr-debug") );
    EXPECT_EQ(eMSGSYSTEM::SYS_USER		, LConversion::String2System("--user-force_debug") );
    EXPECT_EQ(eMSGSYSTEM::SYS_USER		, LConversion::String2System("--usr-force_debug") );
    EXPECT_EQ(eMSGSYSTEM::SYS_GENERAL		, LConversion::String2System("--general-fatal") );
    EXPECT_EQ(eMSGSYSTEM::SYS_GENERAL		, LConversion::String2System("--gen-fatal") );
    EXPECT_EQ(eMSGSYSTEM::SYS_GENERAL		, LConversion::String2System("--general-error") );
    EXPECT_EQ(eMSGSYSTEM::SYS_GENERAL		, LConversion::String2System("--gen-error") );
    EXPECT_EQ(eMSGSYSTEM::SYS_GENERAL		, LConversion::String2System("--general-warning") );
    EXPECT_EQ(eMSGSYSTEM::SYS_GENERAL		, LConversion::String2System("--gen-warning") );
    EXPECT_EQ(eMSGSYSTEM::SYS_GENERAL		, LConversion::String2System("--general-info") );
    EXPECT_EQ(eMSGSYSTEM::SYS_GENERAL		, LConversion::String2System("--gen-info") );
    EXPECT_EQ(eMSGSYSTEM::SYS_GENERAL		, LConversion::String2System("--general-debug") );
    EXPECT_EQ(eMSGSYSTEM::SYS_GENERAL		, LConversion::String2System("--gen-debug") );
    EXPECT_EQ(eMSGSYSTEM::SYS_GENERAL		, LConversion::String2System("--general-force_debug") );
    EXPECT_EQ(eMSGSYSTEM::SYS_GENERAL		, LConversion::String2System("--gen-force_debug") );
    EXPECT_EQ(eMSGSYSTEM::SYS_ALARM		, LConversion::String2System("--alarm-fatal") );
    EXPECT_EQ(eMSGSYSTEM::SYS_ALARM		, LConversion::String2System("--alarm-error") );
    EXPECT_EQ(eMSGSYSTEM::SYS_ALARM		, LConversion::String2System("--alarm-warning") );
    EXPECT_EQ(eMSGSYSTEM::SYS_ALARM		, LConversion::String2System("--alarm-info") );
    EXPECT_EQ(eMSGSYSTEM::SYS_ALARM		, LConversion::String2System("--alarm-debug") );
    EXPECT_EQ(eMSGSYSTEM::SYS_ALARM		, LConversion::String2System("--alarm-force_debug") );
}


TEST_F(TestLConversionAutoGenerated, hash2system)
{
    EXPECT_EQ(eMSGSYSTEM::SYS_EXCEPTION	, LConversion::Hash2System("--exception-fatal") );
    EXPECT_EQ(eMSGSYSTEM::SYS_EXCEPTION	, LConversion::Hash2System("--ex-fatal") );
    EXPECT_EQ(eMSGSYSTEM::SYS_EXCEPTION	, LConversion::Hash2System("--exception-error") );
    EXPECT_EQ(eMSGSYSTEM::SYS_EXCEPTION	, LConversion::Hash2System("--ex-error") );
    EXPECT_EQ(eMSGSYSTEM::SYS_EXCEPTION	, LConversion::Hash2System("--exception-warning") );
    EXPECT_EQ(eMSGSYSTEM::SYS_EXCEPTION	, LConversion::Hash2System("--ex-warning") );
    EXPECT_EQ(eMSGSYSTEM::SYS_EXCEPTION	, LConversion::Hash2System("--exception-info") );
    EXPECT_EQ(eMSGSYSTEM::SYS_EXCEPTION	, LConversion::Hash2System("--ex-info") );
    EXPECT_EQ(eMSGSYSTEM::SYS_EXCEPTION	, LConversion::Hash2System("--exception-debug") );
    EXPECT_EQ(eMSGSYSTEM::SYS_EXCEPTION	, LConversion::Hash2System("--ex-debug") );
    EXPECT_EQ(eMSGSYSTEM::SYS_EXCEPTION	, LConversion::Hash2System("--exception-force_debug") );
    EXPECT_EQ(eMSGSYSTEM::SYS_EXCEPTION	, LConversion::Hash2System("--ex-force_debug") );
    EXPECT_EQ(eMSGSYSTEM::SYS_FSM		, LConversion::Hash2System("--fsm-fatal") );
    EXPECT_EQ(eMSGSYSTEM::SYS_FSM		, LConversion::Hash2System("--fsm-error") );
    EXPECT_EQ(eMSGSYSTEM::SYS_FSM		, LConversion::Hash2System("--fsm-warning") );
    EXPECT_EQ(eMSGSYSTEM::SYS_FSM		, LConversion::Hash2System("--fsm-info") );
    EXPECT_EQ(eMSGSYSTEM::SYS_FSM		, LConversion::Hash2System("--fsm-debug") );
    EXPECT_EQ(eMSGSYSTEM::SYS_FSM		, LConversion::Hash2System("--fsm-force_debug") );
    EXPECT_EQ(eMSGSYSTEM::SYS_MESSAGE		, LConversion::Hash2System("--message-fatal") );
    EXPECT_EQ(eMSGSYSTEM::SYS_MESSAGE		, LConversion::Hash2System("--msg-fatal") );
    EXPECT_EQ(eMSGSYSTEM::SYS_MESSAGE		, LConversion::Hash2System("--message-error") );
    EXPECT_EQ(eMSGSYSTEM::SYS_MESSAGE		, LConversion::Hash2System("--msg-error") );
    EXPECT_EQ(eMSGSYSTEM::SYS_MESSAGE		, LConversion::Hash2System("--message-warning") );
    EXPECT_EQ(eMSGSYSTEM::SYS_MESSAGE		, LConversion::Hash2System("--msg-warning") );
    EXPECT_EQ(eMSGSYSTEM::SYS_MESSAGE		, LConversion::Hash2System("--message-info") );
    EXPECT_EQ(eMSGSYSTEM::SYS_MESSAGE		, LConversion::Hash2System("--msg-info") );
    EXPECT_EQ(eMSGSYSTEM::SYS_MESSAGE		, LConversion::Hash2System("--message-debug") );
    EXPECT_EQ(eMSGSYSTEM::SYS_MESSAGE		, LConversion::Hash2System("--msg-debug") );
    EXPECT_EQ(eMSGSYSTEM::SYS_MESSAGE		, LConversion::Hash2System("--message-force_debug") );
    EXPECT_EQ(eMSGSYSTEM::SYS_MESSAGE		, LConversion::Hash2System("--msg-force_debug") );
    EXPECT_EQ(eMSGSYSTEM::SYS_COM		, LConversion::Hash2System("--com-fatal") );
    EXPECT_EQ(eMSGSYSTEM::SYS_COM		, LConversion::Hash2System("--com-error") );
    EXPECT_EQ(eMSGSYSTEM::SYS_COM		, LConversion::Hash2System("--com-warning") );
    EXPECT_EQ(eMSGSYSTEM::SYS_COM		, LConversion::Hash2System("--com-info") );
    EXPECT_EQ(eMSGSYSTEM::SYS_COM		, LConversion::Hash2System("--com-debug") );
    EXPECT_EQ(eMSGSYSTEM::SYS_COM		, LConversion::Hash2System("--com-force_debug") );
    EXPECT_EQ(eMSGSYSTEM::SYS_XML		, LConversion::Hash2System("--xml-fatal") );
    EXPECT_EQ(eMSGSYSTEM::SYS_XML		, LConversion::Hash2System("--xml-error") );
    EXPECT_EQ(eMSGSYSTEM::SYS_XML		, LConversion::Hash2System("--xml-warning") );
    EXPECT_EQ(eMSGSYSTEM::SYS_XML		, LConversion::Hash2System("--xml-info") );
    EXPECT_EQ(eMSGSYSTEM::SYS_XML		, LConversion::Hash2System("--xml-debug") );
    EXPECT_EQ(eMSGSYSTEM::SYS_XML		, LConversion::Hash2System("--xml-force_debug") );
    EXPECT_EQ(eMSGSYSTEM::SYS_DATABASE	, LConversion::Hash2System("--database-fatal") );
    EXPECT_EQ(eMSGSYSTEM::SYS_DATABASE	, LConversion::Hash2System("--db-fatal") );
    EXPECT_EQ(eMSGSYSTEM::SYS_DATABASE	, LConversion::Hash2System("--database-error") );
    EXPECT_EQ(eMSGSYSTEM::SYS_DATABASE	, LConversion::Hash2System("--db-error") );
    EXPECT_EQ(eMSGSYSTEM::SYS_DATABASE	, LConversion::Hash2System("--database-warning") );
    EXPECT_EQ(eMSGSYSTEM::SYS_DATABASE	, LConversion::Hash2System("--db-warning") );
    EXPECT_EQ(eMSGSYSTEM::SYS_DATABASE	, LConversion::Hash2System("--database-info") );
    EXPECT_EQ(eMSGSYSTEM::SYS_DATABASE	, LConversion::Hash2System("--db-info") );
    EXPECT_EQ(eMSGSYSTEM::SYS_DATABASE	, LConversion::Hash2System("--database-debug") );
    EXPECT_EQ(eMSGSYSTEM::SYS_DATABASE	, LConversion::Hash2System("--db-debug") );
    EXPECT_EQ(eMSGSYSTEM::SYS_DATABASE	, LConversion::Hash2System("--database-force_debug") );
    EXPECT_EQ(eMSGSYSTEM::SYS_DATABASE	, LConversion::Hash2System("--db-force_debug") );
    EXPECT_EQ(eMSGSYSTEM::SYS_USER		, LConversion::Hash2System("--user-fatal") );
    EXPECT_EQ(eMSGSYSTEM::SYS_USER		, LConversion::Hash2System("--usr-fatal") );
    EXPECT_EQ(eMSGSYSTEM::SYS_USER		, LConversion::Hash2System("--user-error") );
    EXPECT_EQ(eMSGSYSTEM::SYS_USER		, LConversion::Hash2System("--usr-error") );
    EXPECT_EQ(eMSGSYSTEM::SYS_USER		, LConversion::Hash2System("--user-warning") );
    EXPECT_EQ(eMSGSYSTEM::SYS_USER		, LConversion::Hash2System("--usr-warning") );
    EXPECT_EQ(eMSGSYSTEM::SYS_USER		, LConversion::Hash2System("--user-info") );
    EXPECT_EQ(eMSGSYSTEM::SYS_USER		, LConversion::Hash2System("--usr-info") );
    EXPECT_EQ(eMSGSYSTEM::SYS_USER		, LConversion::Hash2System("--user-debug") );
    EXPECT_EQ(eMSGSYSTEM::SYS_USER		, LConversion::Hash2System("--usr-debug") );
    EXPECT_EQ(eMSGSYSTEM::SYS_USER		, LConversion::Hash2System("--user-force_debug") );
    EXPECT_EQ(eMSGSYSTEM::SYS_USER		, LConversion::Hash2System("--usr-force_debug") );
    EXPECT_EQ(eMSGSYSTEM::SYS_GENERAL		, LConversion::Hash2System("--general-fatal") );
    EXPECT_EQ(eMSGSYSTEM::SYS_GENERAL		, LConversion::Hash2System("--gen-fatal") );
    EXPECT_EQ(eMSGSYSTEM::SYS_GENERAL		, LConversion::Hash2System("--general-error") );
    EXPECT_EQ(eMSGSYSTEM::SYS_GENERAL		, LConversion::Hash2System("--gen-error") );
    EXPECT_EQ(eMSGSYSTEM::SYS_GENERAL		, LConversion::Hash2System("--general-warning") );
    EXPECT_EQ(eMSGSYSTEM::SYS_GENERAL		, LConversion::Hash2System("--gen-warning") );
    EXPECT_EQ(eMSGSYSTEM::SYS_GENERAL		, LConversion::Hash2System("--general-info") );
    EXPECT_EQ(eMSGSYSTEM::SYS_GENERAL		, LConversion::Hash2System("--gen-info") );
    EXPECT_EQ(eMSGSYSTEM::SYS_GENERAL		, LConversion::Hash2System("--general-debug") );
    EXPECT_EQ(eMSGSYSTEM::SYS_GENERAL		, LConversion::Hash2System("--gen-debug") );
    EXPECT_EQ(eMSGSYSTEM::SYS_GENERAL		, LConversion::Hash2System("--general-force_debug") );
    EXPECT_EQ(eMSGSYSTEM::SYS_GENERAL		, LConversion::Hash2System("--gen-force_debug") );
    EXPECT_EQ(eMSGSYSTEM::SYS_ALARM		, LConversion::Hash2System("--alarm-fatal") );
    EXPECT_EQ(eMSGSYSTEM::SYS_ALARM		, LConversion::Hash2System("--alarm-error") );
    EXPECT_EQ(eMSGSYSTEM::SYS_ALARM		, LConversion::Hash2System("--alarm-warning") );
    EXPECT_EQ(eMSGSYSTEM::SYS_ALARM		, LConversion::Hash2System("--alarm-info") );
    EXPECT_EQ(eMSGSYSTEM::SYS_ALARM		, LConversion::Hash2System("--alarm-debug") );
    EXPECT_EQ(eMSGSYSTEM::SYS_ALARM		, LConversion::Hash2System("--alarm-force_debug") );
}


TEST_F(TestLConversionAutoGenerated, string2level)
{
    EXPECT_EQ(eLOGLEVEL::LOG_FATAL		, LConversion::String2Level("000000010000000000000001") );
    EXPECT_EQ(eLOGLEVEL::LOG_ERROR		, LConversion::String2Level("000000100000000000000001") );
    EXPECT_EQ(eLOGLEVEL::LOG_WARNING		, LConversion::String2Level("000001000000000000000001") );
    EXPECT_EQ(eLOGLEVEL::LOG_INFO		, LConversion::String2Level("000010000000000000000001") );
    EXPECT_EQ(eLOGLEVEL::LOG_DEBUG		, LConversion::String2Level("000100000000000000000001") );
    EXPECT_EQ(eLOGLEVEL::LOG_FORCE_DEBUG	, LConversion::String2Level("001000000000000000000001") );
    EXPECT_EQ(eLOGLEVEL::LOG_FATAL		, LConversion::String2Level("000000010000000000000010") );
    EXPECT_EQ(eLOGLEVEL::LOG_ERROR		, LConversion::String2Level("000000100000000000000010") );
    EXPECT_EQ(eLOGLEVEL::LOG_WARNING		, LConversion::String2Level("000001000000000000000010") );
    EXPECT_EQ(eLOGLEVEL::LOG_INFO		, LConversion::String2Level("000010000000000000000010") );
    EXPECT_EQ(eLOGLEVEL::LOG_DEBUG		, LConversion::String2Level("000100000000000000000010") );
    EXPECT_EQ(eLOGLEVEL::LOG_FORCE_DEBUG	, LConversion::String2Level("001000000000000000000010") );
    EXPECT_EQ(eLOGLEVEL::LOG_FATAL		, LConversion::String2Level("000000010000000000000100") );
    EXPECT_EQ(eLOGLEVEL::LOG_ERROR		, LConversion::String2Level("000000100000000000000100") );
    EXPECT_EQ(eLOGLEVEL::LOG_WARNING		, LConversion::String2Level("000001000000000000000100") );
    EXPECT_EQ(eLOGLEVEL::LOG_INFO		, LConversion::String2Level("000010000000000000000100") );
    EXPECT_EQ(eLOGLEVEL::LOG_DEBUG		, LConversion::String2Level("000100000000000000000100") );
    EXPECT_EQ(eLOGLEVEL::LOG_FORCE_DEBUG	, LConversion::String2Level("001000000000000000000100") );
    EXPECT_EQ(eLOGLEVEL::LOG_FATAL		, LConversion::String2Level("000000010000000000001000") );
    EXPECT_EQ(eLOGLEVEL::LOG_ERROR		, LConversion::String2Level("000000100000000000001000") );
    EXPECT_EQ(eLOGLEVEL::LOG_WARNING		, LConversion::String2Level("000001000000000000001000") );
    EXPECT_EQ(eLOGLEVEL::LOG_INFO		, LConversion::String2Level("000010000000000000001000") );
    EXPECT_EQ(eLOGLEVEL::LOG_DEBUG		, LConversion::String2Level("000100000000000000001000") );
    EXPECT_EQ(eLOGLEVEL::LOG_FORCE_DEBUG	, LConversion::String2Level("001000000000000000001000") );
    EXPECT_EQ(eLOGLEVEL::LOG_FATAL		, LConversion::String2Level("000000010000000000010000") );
    EXPECT_EQ(eLOGLEVEL::LOG_ERROR		, LConversion::String2Level("000000100000000000010000") );
    EXPECT_EQ(eLOGLEVEL::LOG_WARNING		, LConversion::String2Level("000001000000000000010000") );
    EXPECT_EQ(eLOGLEVEL::LOG_INFO		, LConversion::String2Level("000010000000000000010000") );
    EXPECT_EQ(eLOGLEVEL::LOG_DEBUG		, LConversion::String2Level("000100000000000000010000") );
    EXPECT_EQ(eLOGLEVEL::LOG_FORCE_DEBUG	, LConversion::String2Level("001000000000000000010000") );
    EXPECT_EQ(eLOGLEVEL::LOG_FATAL		, LConversion::String2Level("000000010000000000100000") );
    EXPECT_EQ(eLOGLEVEL::LOG_ERROR		, LConversion::String2Level("000000100000000000100000") );
    EXPECT_EQ(eLOGLEVEL::LOG_WARNING		, LConversion::String2Level("000001000000000000100000") );
    EXPECT_EQ(eLOGLEVEL::LOG_INFO		, LConversion::String2Level("000010000000000000100000") );
    EXPECT_EQ(eLOGLEVEL::LOG_DEBUG		, LConversion::String2Level("000100000000000000100000") );
    EXPECT_EQ(eLOGLEVEL::LOG_FORCE_DEBUG	, LConversion::String2Level("001000000000000000100000") );
    EXPECT_EQ(eLOGLEVEL::LOG_FATAL		, LConversion::String2Level("000000010000000001000000") );
    EXPECT_EQ(eLOGLEVEL::LOG_ERROR		, LConversion::String2Level("000000100000000001000000") );
    EXPECT_EQ(eLOGLEVEL::LOG_WARNING		, LConversion::String2Level("000001000000000001000000") );
    EXPECT_EQ(eLOGLEVEL::LOG_INFO		, LConversion::String2Level("000010000000000001000000") );
    EXPECT_EQ(eLOGLEVEL::LOG_DEBUG		, LConversion::String2Level("000100000000000001000000") );
    EXPECT_EQ(eLOGLEVEL::LOG_FORCE_DEBUG	, LConversion::String2Level("001000000000000001000000") );
    EXPECT_EQ(eLOGLEVEL::LOG_FATAL		, LConversion::String2Level("000000010000000010000000") );
    EXPECT_EQ(eLOGLEVEL::LOG_ERROR		, LConversion::String2Level("000000100000000010000000") );
    EXPECT_EQ(eLOGLEVEL::LOG_WARNING		, LConversion::String2Level("000001000000000010000000") );
    EXPECT_EQ(eLOGLEVEL::LOG_INFO		, LConversion::String2Level("000010000000000010000000") );
    EXPECT_EQ(eLOGLEVEL::LOG_DEBUG		, LConversion::String2Level("000100000000000010000000") );
    EXPECT_EQ(eLOGLEVEL::LOG_FORCE_DEBUG	, LConversion::String2Level("001000000000000010000000") );
    EXPECT_EQ(eLOGLEVEL::LOG_FATAL		, LConversion::String2Level("000000010000000100000000") );
    EXPECT_EQ(eLOGLEVEL::LOG_ERROR		, LConversion::String2Level("000000100000000100000000") );
    EXPECT_EQ(eLOGLEVEL::LOG_WARNING		, LConversion::String2Level("000001000000000100000000") );
    EXPECT_EQ(eLOGLEVEL::LOG_INFO		, LConversion::String2Level("000010000000000100000000") );
    EXPECT_EQ(eLOGLEVEL::LOG_DEBUG		, LConversion::String2Level("000100000000000100000000") );
    EXPECT_EQ(eLOGLEVEL::LOG_FORCE_DEBUG	, LConversion::String2Level("001000000000000100000000") );
}


TEST_F(TestLConversionAutoGenerated, bin2level)
{
    EXPECT_EQ(eLOGLEVEL::LOG_FATAL		, LConversion::BinaryString2Level("000000010000000000000001") );
    EXPECT_EQ(eLOGLEVEL::LOG_ERROR		, LConversion::BinaryString2Level("000000100000000000000001") );
    EXPECT_EQ(eLOGLEVEL::LOG_WARNING		, LConversion::BinaryString2Level("000001000000000000000001") );
    EXPECT_EQ(eLOGLEVEL::LOG_INFO		, LConversion::BinaryString2Level("000010000000000000000001") );
    EXPECT_EQ(eLOGLEVEL::LOG_DEBUG		, LConversion::BinaryString2Level("000100000000000000000001") );
    EXPECT_EQ(eLOGLEVEL::LOG_FORCE_DEBUG	, LConversion::BinaryString2Level("001000000000000000000001") );
    EXPECT_EQ(eLOGLEVEL::LOG_FATAL		, LConversion::BinaryString2Level("000000010000000000000010") );
    EXPECT_EQ(eLOGLEVEL::LOG_ERROR		, LConversion::BinaryString2Level("000000100000000000000010") );
    EXPECT_EQ(eLOGLEVEL::LOG_WARNING		, LConversion::BinaryString2Level("000001000000000000000010") );
    EXPECT_EQ(eLOGLEVEL::LOG_INFO		, LConversion::BinaryString2Level("000010000000000000000010") );
    EXPECT_EQ(eLOGLEVEL::LOG_DEBUG		, LConversion::BinaryString2Level("000100000000000000000010") );
    EXPECT_EQ(eLOGLEVEL::LOG_FORCE_DEBUG	, LConversion::BinaryString2Level("001000000000000000000010") );
    EXPECT_EQ(eLOGLEVEL::LOG_FATAL		, LConversion::BinaryString2Level("000000010000000000000100") );
    EXPECT_EQ(eLOGLEVEL::LOG_ERROR		, LConversion::BinaryString2Level("000000100000000000000100") );
    EXPECT_EQ(eLOGLEVEL::LOG_WARNING		, LConversion::BinaryString2Level("000001000000000000000100") );
    EXPECT_EQ(eLOGLEVEL::LOG_INFO		, LConversion::BinaryString2Level("000010000000000000000100") );
    EXPECT_EQ(eLOGLEVEL::LOG_DEBUG		, LConversion::BinaryString2Level("000100000000000000000100") );
    EXPECT_EQ(eLOGLEVEL::LOG_FORCE_DEBUG	, LConversion::BinaryString2Level("001000000000000000000100") );
    EXPECT_EQ(eLOGLEVEL::LOG_FATAL		, LConversion::BinaryString2Level("000000010000000000001000") );
    EXPECT_EQ(eLOGLEVEL::LOG_ERROR		, LConversion::BinaryString2Level("000000100000000000001000") );
    EXPECT_EQ(eLOGLEVEL::LOG_WARNING		, LConversion::BinaryString2Level("000001000000000000001000") );
    EXPECT_EQ(eLOGLEVEL::LOG_INFO		, LConversion::BinaryString2Level("000010000000000000001000") );
    EXPECT_EQ(eLOGLEVEL::LOG_DEBUG		, LConversion::BinaryString2Level("000100000000000000001000") );
    EXPECT_EQ(eLOGLEVEL::LOG_FORCE_DEBUG	, LConversion::BinaryString2Level("001000000000000000001000") );
    EXPECT_EQ(eLOGLEVEL::LOG_FATAL		, LConversion::BinaryString2Level("000000010000000000010000") );
    EXPECT_EQ(eLOGLEVEL::LOG_ERROR		, LConversion::BinaryString2Level("000000100000000000010000") );
    EXPECT_EQ(eLOGLEVEL::LOG_WARNING		, LConversion::BinaryString2Level("000001000000000000010000") );
    EXPECT_EQ(eLOGLEVEL::LOG_INFO		, LConversion::BinaryString2Level("000010000000000000010000") );
    EXPECT_EQ(eLOGLEVEL::LOG_DEBUG		, LConversion::BinaryString2Level("000100000000000000010000") );
    EXPECT_EQ(eLOGLEVEL::LOG_FORCE_DEBUG	, LConversion::BinaryString2Level("001000000000000000010000") );
    EXPECT_EQ(eLOGLEVEL::LOG_FATAL		, LConversion::BinaryString2Level("000000010000000000100000") );
    EXPECT_EQ(eLOGLEVEL::LOG_ERROR		, LConversion::BinaryString2Level("000000100000000000100000") );
    EXPECT_EQ(eLOGLEVEL::LOG_WARNING		, LConversion::BinaryString2Level("000001000000000000100000") );
    EXPECT_EQ(eLOGLEVEL::LOG_INFO		, LConversion::BinaryString2Level("000010000000000000100000") );
    EXPECT_EQ(eLOGLEVEL::LOG_DEBUG		, LConversion::BinaryString2Level("000100000000000000100000") );
    EXPECT_EQ(eLOGLEVEL::LOG_FORCE_DEBUG	, LConversion::BinaryString2Level("001000000000000000100000") );
    EXPECT_EQ(eLOGLEVEL::LOG_FATAL		, LConversion::BinaryString2Level("000000010000000001000000") );
    EXPECT_EQ(eLOGLEVEL::LOG_ERROR		, LConversion::BinaryString2Level("000000100000000001000000") );
    EXPECT_EQ(eLOGLEVEL::LOG_WARNING		, LConversion::BinaryString2Level("000001000000000001000000") );
    EXPECT_EQ(eLOGLEVEL::LOG_INFO		, LConversion::BinaryString2Level("000010000000000001000000") );
    EXPECT_EQ(eLOGLEVEL::LOG_DEBUG		, LConversion::BinaryString2Level("000100000000000001000000") );
    EXPECT_EQ(eLOGLEVEL::LOG_FORCE_DEBUG	, LConversion::BinaryString2Level("001000000000000001000000") );
    EXPECT_EQ(eLOGLEVEL::LOG_FATAL		, LConversion::BinaryString2Level("000000010000000010000000") );
    EXPECT_EQ(eLOGLEVEL::LOG_ERROR		, LConversion::BinaryString2Level("000000100000000010000000") );
    EXPECT_EQ(eLOGLEVEL::LOG_WARNING		, LConversion::BinaryString2Level("000001000000000010000000") );
    EXPECT_EQ(eLOGLEVEL::LOG_INFO		, LConversion::BinaryString2Level("000010000000000010000000") );
    EXPECT_EQ(eLOGLEVEL::LOG_DEBUG		, LConversion::BinaryString2Level("000100000000000010000000") );
    EXPECT_EQ(eLOGLEVEL::LOG_FORCE_DEBUG	, LConversion::BinaryString2Level("001000000000000010000000") );
    EXPECT_EQ(eLOGLEVEL::LOG_FATAL		, LConversion::BinaryString2Level("000000010000000100000000") );
    EXPECT_EQ(eLOGLEVEL::LOG_ERROR		, LConversion::BinaryString2Level("000000100000000100000000") );
    EXPECT_EQ(eLOGLEVEL::LOG_WARNING		, LConversion::BinaryString2Level("000001000000000100000000") );
    EXPECT_EQ(eLOGLEVEL::LOG_INFO		, LConversion::BinaryString2Level("000010000000000100000000") );
    EXPECT_EQ(eLOGLEVEL::LOG_DEBUG		, LConversion::BinaryString2Level("000100000000000100000000") );
    EXPECT_EQ(eLOGLEVEL::LOG_FORCE_DEBUG	, LConversion::BinaryString2Level("001000000000000100000000") );
}


TEST_F(TestLConversionAutoGenerated, string2level_hex)
{
    EXPECT_EQ(eLOGLEVEL::LOG_FATAL		, LConversion::String2Level("0x010001") );
    EXPECT_EQ(eLOGLEVEL::LOG_ERROR		, LConversion::String2Level("0x020001") );
    EXPECT_EQ(eLOGLEVEL::LOG_WARNING		, LConversion::String2Level("0x040001") );
    EXPECT_EQ(eLOGLEVEL::LOG_INFO		, LConversion::String2Level("0x080001") );
    EXPECT_EQ(eLOGLEVEL::LOG_DEBUG		, LConversion::String2Level("0x100001") );
    EXPECT_EQ(eLOGLEVEL::LOG_FORCE_DEBUG	, LConversion::String2Level("0x200001") );
    EXPECT_EQ(eLOGLEVEL::LOG_FATAL		, LConversion::String2Level("0x010002") );
    EXPECT_EQ(eLOGLEVEL::LOG_ERROR		, LConversion::String2Level("0x020002") );
    EXPECT_EQ(eLOGLEVEL::LOG_WARNING		, LConversion::String2Level("0x040002") );
    EXPECT_EQ(eLOGLEVEL::LOG_INFO		, LConversion::String2Level("0x080002") );
    EXPECT_EQ(eLOGLEVEL::LOG_DEBUG		, LConversion::String2Level("0x100002") );
    EXPECT_EQ(eLOGLEVEL::LOG_FORCE_DEBUG	, LConversion::String2Level("0x200002") );
    EXPECT_EQ(eLOGLEVEL::LOG_FATAL		, LConversion::String2Level("0x010004") );
    EXPECT_EQ(eLOGLEVEL::LOG_ERROR		, LConversion::String2Level("0x020004") );
    EXPECT_EQ(eLOGLEVEL::LOG_WARNING		, LConversion::String2Level("0x040004") );
    EXPECT_EQ(eLOGLEVEL::LOG_INFO		, LConversion::String2Level("0x080004") );
    EXPECT_EQ(eLOGLEVEL::LOG_DEBUG		, LConversion::String2Level("0x100004") );
    EXPECT_EQ(eLOGLEVEL::LOG_FORCE_DEBUG	, LConversion::String2Level("0x200004") );
    EXPECT_EQ(eLOGLEVEL::LOG_FATAL		, LConversion::String2Level("0x010008") );
    EXPECT_EQ(eLOGLEVEL::LOG_ERROR		, LConversion::String2Level("0x020008") );
    EXPECT_EQ(eLOGLEVEL::LOG_WARNING		, LConversion::String2Level("0x040008") );
    EXPECT_EQ(eLOGLEVEL::LOG_INFO		, LConversion::String2Level("0x080008") );
    EXPECT_EQ(eLOGLEVEL::LOG_DEBUG		, LConversion::String2Level("0x100008") );
    EXPECT_EQ(eLOGLEVEL::LOG_FORCE_DEBUG	, LConversion::String2Level("0x200008") );
    EXPECT_EQ(eLOGLEVEL::LOG_FATAL		, LConversion::String2Level("0x010010") );
    EXPECT_EQ(eLOGLEVEL::LOG_ERROR		, LConversion::String2Level("0x020010") );
    EXPECT_EQ(eLOGLEVEL::LOG_WARNING		, LConversion::String2Level("0x040010") );
    EXPECT_EQ(eLOGLEVEL::LOG_INFO		, LConversion::String2Level("0x080010") );
    EXPECT_EQ(eLOGLEVEL::LOG_DEBUG		, LConversion::String2Level("0x100010") );
    EXPECT_EQ(eLOGLEVEL::LOG_FORCE_DEBUG	, LConversion::String2Level("0x200010") );
    EXPECT_EQ(eLOGLEVEL::LOG_FATAL		, LConversion::String2Level("0x010020") );
    EXPECT_EQ(eLOGLEVEL::LOG_ERROR		, LConversion::String2Level("0x020020") );
    EXPECT_EQ(eLOGLEVEL::LOG_WARNING		, LConversion::String2Level("0x040020") );
    EXPECT_EQ(eLOGLEVEL::LOG_INFO		, LConversion::String2Level("0x080020") );
    EXPECT_EQ(eLOGLEVEL::LOG_DEBUG		, LConversion::String2Level("0x100020") );
    EXPECT_EQ(eLOGLEVEL::LOG_FORCE_DEBUG	, LConversion::String2Level("0x200020") );
    EXPECT_EQ(eLOGLEVEL::LOG_FATAL		, LConversion::String2Level("0x010040") );
    EXPECT_EQ(eLOGLEVEL::LOG_ERROR		, LConversion::String2Level("0x020040") );
    EXPECT_EQ(eLOGLEVEL::LOG_WARNING		, LConversion::String2Level("0x040040") );
    EXPECT_EQ(eLOGLEVEL::LOG_INFO		, LConversion::String2Level("0x080040") );
    EXPECT_EQ(eLOGLEVEL::LOG_DEBUG		, LConversion::String2Level("0x100040") );
    EXPECT_EQ(eLOGLEVEL::LOG_FORCE_DEBUG	, LConversion::String2Level("0x200040") );
    EXPECT_EQ(eLOGLEVEL::LOG_FATAL		, LConversion::String2Level("0x010080") );
    EXPECT_EQ(eLOGLEVEL::LOG_ERROR		, LConversion::String2Level("0x020080") );
    EXPECT_EQ(eLOGLEVEL::LOG_WARNING		, LConversion::String2Level("0x040080") );
    EXPECT_EQ(eLOGLEVEL::LOG_INFO		, LConversion::String2Level("0x080080") );
    EXPECT_EQ(eLOGLEVEL::LOG_DEBUG		, LConversion::String2Level("0x100080") );
    EXPECT_EQ(eLOGLEVEL::LOG_FORCE_DEBUG	, LConversion::String2Level("0x200080") );
    EXPECT_EQ(eLOGLEVEL::LOG_FATAL		, LConversion::String2Level("0x010100") );
    EXPECT_EQ(eLOGLEVEL::LOG_ERROR		, LConversion::String2Level("0x020100") );
    EXPECT_EQ(eLOGLEVEL::LOG_WARNING		, LConversion::String2Level("0x040100") );
    EXPECT_EQ(eLOGLEVEL::LOG_INFO		, LConversion::String2Level("0x080100") );
    EXPECT_EQ(eLOGLEVEL::LOG_DEBUG		, LConversion::String2Level("0x100100") );
    EXPECT_EQ(eLOGLEVEL::LOG_FORCE_DEBUG	, LConversion::String2Level("0x200100") );
}


TEST_F(TestLConversionAutoGenerated, hex2level)
{
    EXPECT_EQ(eLOGLEVEL::LOG_FATAL		, LConversion::HexString2Level("0x010001") );
    EXPECT_EQ(eLOGLEVEL::LOG_ERROR		, LConversion::HexString2Level("0x020001") );
    EXPECT_EQ(eLOGLEVEL::LOG_WARNING		, LConversion::HexString2Level("0x040001") );
    EXPECT_EQ(eLOGLEVEL::LOG_INFO		, LConversion::HexString2Level("0x080001") );
    EXPECT_EQ(eLOGLEVEL::LOG_DEBUG		, LConversion::HexString2Level("0x100001") );
    EXPECT_EQ(eLOGLEVEL::LOG_FORCE_DEBUG	, LConversion::HexString2Level("0x200001") );
    EXPECT_EQ(eLOGLEVEL::LOG_FATAL		, LConversion::HexString2Level("0x010002") );
    EXPECT_EQ(eLOGLEVEL::LOG_ERROR		, LConversion::HexString2Level("0x020002") );
    EXPECT_EQ(eLOGLEVEL::LOG_WARNING		, LConversion::HexString2Level("0x040002") );
    EXPECT_EQ(eLOGLEVEL::LOG_INFO		, LConversion::HexString2Level("0x080002") );
    EXPECT_EQ(eLOGLEVEL::LOG_DEBUG		, LConversion::HexString2Level("0x100002") );
    EXPECT_EQ(eLOGLEVEL::LOG_FORCE_DEBUG	, LConversion::HexString2Level("0x200002") );
    EXPECT_EQ(eLOGLEVEL::LOG_FATAL		, LConversion::HexString2Level("0x010004") );
    EXPECT_EQ(eLOGLEVEL::LOG_ERROR		, LConversion::HexString2Level("0x020004") );
    EXPECT_EQ(eLOGLEVEL::LOG_WARNING		, LConversion::HexString2Level("0x040004") );
    EXPECT_EQ(eLOGLEVEL::LOG_INFO		, LConversion::HexString2Level("0x080004") );
    EXPECT_EQ(eLOGLEVEL::LOG_DEBUG		, LConversion::HexString2Level("0x100004") );
    EXPECT_EQ(eLOGLEVEL::LOG_FORCE_DEBUG	, LConversion::HexString2Level("0x200004") );
    EXPECT_EQ(eLOGLEVEL::LOG_FATAL		, LConversion::HexString2Level("0x010008") );
    EXPECT_EQ(eLOGLEVEL::LOG_ERROR		, LConversion::HexString2Level("0x020008") );
    EXPECT_EQ(eLOGLEVEL::LOG_WARNING		, LConversion::HexString2Level("0x040008") );
    EXPECT_EQ(eLOGLEVEL::LOG_INFO		, LConversion::HexString2Level("0x080008") );
    EXPECT_EQ(eLOGLEVEL::LOG_DEBUG		, LConversion::HexString2Level("0x100008") );
    EXPECT_EQ(eLOGLEVEL::LOG_FORCE_DEBUG	, LConversion::HexString2Level("0x200008") );
    EXPECT_EQ(eLOGLEVEL::LOG_FATAL		, LConversion::HexString2Level("0x010010") );
    EXPECT_EQ(eLOGLEVEL::LOG_ERROR		, LConversion::HexString2Level("0x020010") );
    EXPECT_EQ(eLOGLEVEL::LOG_WARNING		, LConversion::HexString2Level("0x040010") );
    EXPECT_EQ(eLOGLEVEL::LOG_INFO		, LConversion::HexString2Level("0x080010") );
    EXPECT_EQ(eLOGLEVEL::LOG_DEBUG		, LConversion::HexString2Level("0x100010") );
    EXPECT_EQ(eLOGLEVEL::LOG_FORCE_DEBUG	, LConversion::HexString2Level("0x200010") );
    EXPECT_EQ(eLOGLEVEL::LOG_FATAL		, LConversion::HexString2Level("0x010020") );
    EXPECT_EQ(eLOGLEVEL::LOG_ERROR		, LConversion::HexString2Level("0x020020") );
    EXPECT_EQ(eLOGLEVEL::LOG_WARNING		, LConversion::HexString2Level("0x040020") );
    EXPECT_EQ(eLOGLEVEL::LOG_INFO		, LConversion::HexString2Level("0x080020") );
    EXPECT_EQ(eLOGLEVEL::LOG_DEBUG		, LConversion::HexString2Level("0x100020") );
    EXPECT_EQ(eLOGLEVEL::LOG_FORCE_DEBUG	, LConversion::HexString2Level("0x200020") );
    EXPECT_EQ(eLOGLEVEL::LOG_FATAL		, LConversion::HexString2Level("0x010040") );
    EXPECT_EQ(eLOGLEVEL::LOG_ERROR		, LConversion::HexString2Level("0x020040") );
    EXPECT_EQ(eLOGLEVEL::LOG_WARNING		, LConversion::HexString2Level("0x040040") );
    EXPECT_EQ(eLOGLEVEL::LOG_INFO		, LConversion::HexString2Level("0x080040") );
    EXPECT_EQ(eLOGLEVEL::LOG_DEBUG		, LConversion::HexString2Level("0x100040") );
    EXPECT_EQ(eLOGLEVEL::LOG_FORCE_DEBUG	, LConversion::HexString2Level("0x200040") );
    EXPECT_EQ(eLOGLEVEL::LOG_FATAL		, LConversion::HexString2Level("0x010080") );
    EXPECT_EQ(eLOGLEVEL::LOG_ERROR		, LConversion::HexString2Level("0x020080") );
    EXPECT_EQ(eLOGLEVEL::LOG_WARNING		, LConversion::HexString2Level("0x040080") );
    EXPECT_EQ(eLOGLEVEL::LOG_INFO		, LConversion::HexString2Level("0x080080") );
    EXPECT_EQ(eLOGLEVEL::LOG_DEBUG		, LConversion::HexString2Level("0x100080") );
    EXPECT_EQ(eLOGLEVEL::LOG_FORCE_DEBUG	, LConversion::HexString2Level("0x200080") );
    EXPECT_EQ(eLOGLEVEL::LOG_FATAL		, LConversion::HexString2Level("0x010100") );
    EXPECT_EQ(eLOGLEVEL::LOG_ERROR		, LConversion::HexString2Level("0x020100") );
    EXPECT_EQ(eLOGLEVEL::LOG_WARNING		, LConversion::HexString2Level("0x040100") );
    EXPECT_EQ(eLOGLEVEL::LOG_INFO		, LConversion::HexString2Level("0x080100") );
    EXPECT_EQ(eLOGLEVEL::LOG_DEBUG		, LConversion::HexString2Level("0x100100") );
    EXPECT_EQ(eLOGLEVEL::LOG_FORCE_DEBUG	, LConversion::HexString2Level("0x200100") );
}


TEST_F(TestLConversionAutoGenerated, string2levelhash)
{
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_FATAL),		 (int)LConversion::String2Level("--exception-fatal") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_FATAL),		 (int)LConversion::String2Level("--ex-fatal") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_ERROR),		 (int)LConversion::String2Level("--exception-error") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_ERROR),		 (int)LConversion::String2Level("--ex-error") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_WARNING),		 (int)LConversion::String2Level("--exception-warning") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_WARNING),		 (int)LConversion::String2Level("--ex-warning") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_INFO),		 (int)LConversion::String2Level("--exception-info") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_INFO),		 (int)LConversion::String2Level("--ex-info") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_DEBUG),		 (int)LConversion::String2Level("--exception-debug") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_DEBUG),		 (int)LConversion::String2Level("--ex-debug") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_FORCE_DEBUG),		 (int)LConversion::String2Level("--exception-force_debug") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_FORCE_DEBUG),		 (int)LConversion::String2Level("--ex-force_debug") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_FATAL),		 (int)LConversion::String2Level("--fsm-fatal") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_ERROR),		 (int)LConversion::String2Level("--fsm-error") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_WARNING),		 (int)LConversion::String2Level("--fsm-warning") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_INFO),		 (int)LConversion::String2Level("--fsm-info") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_DEBUG),		 (int)LConversion::String2Level("--fsm-debug") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_FORCE_DEBUG),		 (int)LConversion::String2Level("--fsm-force_debug") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_FATAL),		 (int)LConversion::String2Level("--message-fatal") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_FATAL),		 (int)LConversion::String2Level("--msg-fatal") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_ERROR),		 (int)LConversion::String2Level("--message-error") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_ERROR),		 (int)LConversion::String2Level("--msg-error") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_WARNING),		 (int)LConversion::String2Level("--message-warning") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_WARNING),		 (int)LConversion::String2Level("--msg-warning") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_INFO),		 (int)LConversion::String2Level("--message-info") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_INFO),		 (int)LConversion::String2Level("--msg-info") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_DEBUG),		 (int)LConversion::String2Level("--message-debug") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_DEBUG),		 (int)LConversion::String2Level("--msg-debug") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_FORCE_DEBUG),		 (int)LConversion::String2Level("--message-force_debug") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_FORCE_DEBUG),		 (int)LConversion::String2Level("--msg-force_debug") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_FATAL),		 (int)LConversion::String2Level("--com-fatal") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_ERROR),		 (int)LConversion::String2Level("--com-error") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_WARNING),		 (int)LConversion::String2Level("--com-warning") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_INFO),		 (int)LConversion::String2Level("--com-info") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_DEBUG),		 (int)LConversion::String2Level("--com-debug") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_FORCE_DEBUG),		 (int)LConversion::String2Level("--com-force_debug") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_FATAL),		 (int)LConversion::String2Level("--xml-fatal") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_ERROR),		 (int)LConversion::String2Level("--xml-error") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_WARNING),		 (int)LConversion::String2Level("--xml-warning") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_INFO),		 (int)LConversion::String2Level("--xml-info") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_DEBUG),		 (int)LConversion::String2Level("--xml-debug") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_FORCE_DEBUG),		 (int)LConversion::String2Level("--xml-force_debug") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_FATAL),		 (int)LConversion::String2Level("--database-fatal") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_FATAL),		 (int)LConversion::String2Level("--db-fatal") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_ERROR),		 (int)LConversion::String2Level("--database-error") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_ERROR),		 (int)LConversion::String2Level("--db-error") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_WARNING),		 (int)LConversion::String2Level("--database-warning") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_WARNING),		 (int)LConversion::String2Level("--db-warning") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_INFO),		 (int)LConversion::String2Level("--database-info") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_INFO),		 (int)LConversion::String2Level("--db-info") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_DEBUG),		 (int)LConversion::String2Level("--database-debug") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_DEBUG),		 (int)LConversion::String2Level("--db-debug") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_FORCE_DEBUG),		 (int)LConversion::String2Level("--database-force_debug") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_FORCE_DEBUG),		 (int)LConversion::String2Level("--db-force_debug") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_FATAL),		 (int)LConversion::String2Level("--user-fatal") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_FATAL),		 (int)LConversion::String2Level("--usr-fatal") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_ERROR),		 (int)LConversion::String2Level("--user-error") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_ERROR),		 (int)LConversion::String2Level("--usr-error") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_WARNING),		 (int)LConversion::String2Level("--user-warning") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_WARNING),		 (int)LConversion::String2Level("--usr-warning") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_INFO),		 (int)LConversion::String2Level("--user-info") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_INFO),		 (int)LConversion::String2Level("--usr-info") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_DEBUG),		 (int)LConversion::String2Level("--user-debug") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_DEBUG),		 (int)LConversion::String2Level("--usr-debug") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_FORCE_DEBUG),		 (int)LConversion::String2Level("--user-force_debug") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_FORCE_DEBUG),		 (int)LConversion::String2Level("--usr-force_debug") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_FATAL),		 (int)LConversion::String2Level("--general-fatal") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_FATAL),		 (int)LConversion::String2Level("--gen-fatal") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_ERROR),		 (int)LConversion::String2Level("--general-error") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_ERROR),		 (int)LConversion::String2Level("--gen-error") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_WARNING),		 (int)LConversion::String2Level("--general-warning") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_WARNING),		 (int)LConversion::String2Level("--gen-warning") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_INFO),		 (int)LConversion::String2Level("--general-info") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_INFO),		 (int)LConversion::String2Level("--gen-info") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_DEBUG),		 (int)LConversion::String2Level("--general-debug") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_DEBUG),		 (int)LConversion::String2Level("--gen-debug") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_FORCE_DEBUG),		 (int)LConversion::String2Level("--general-force_debug") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_FORCE_DEBUG),		 (int)LConversion::String2Level("--gen-force_debug") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_FATAL),		 (int)LConversion::String2Level("--alarm-fatal") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_ERROR),		 (int)LConversion::String2Level("--alarm-error") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_WARNING),		 (int)LConversion::String2Level("--alarm-warning") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_INFO),		 (int)LConversion::String2Level("--alarm-info") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_DEBUG),		 (int)LConversion::String2Level("--alarm-debug") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_FORCE_DEBUG),		 (int)LConversion::String2Level("--alarm-force_debug") );
}


TEST_F(TestLConversionAutoGenerated, has2level)
{
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_FATAL),		 (int)LConversion::Hash2Level("--exception-fatal") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_FATAL),		 (int)LConversion::Hash2Level("--ex-fatal") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_ERROR),		 (int)LConversion::Hash2Level("--exception-error") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_ERROR),		 (int)LConversion::Hash2Level("--ex-error") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_WARNING),		 (int)LConversion::Hash2Level("--exception-warning") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_WARNING),		 (int)LConversion::Hash2Level("--ex-warning") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_INFO),		 (int)LConversion::Hash2Level("--exception-info") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_INFO),		 (int)LConversion::Hash2Level("--ex-info") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_DEBUG),		 (int)LConversion::Hash2Level("--exception-debug") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_DEBUG),		 (int)LConversion::Hash2Level("--ex-debug") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_FORCE_DEBUG),		 (int)LConversion::Hash2Level("--exception-force_debug") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_FORCE_DEBUG),		 (int)LConversion::Hash2Level("--ex-force_debug") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_FATAL),		 (int)LConversion::Hash2Level("--fsm-fatal") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_ERROR),		 (int)LConversion::Hash2Level("--fsm-error") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_WARNING),		 (int)LConversion::Hash2Level("--fsm-warning") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_INFO),		 (int)LConversion::Hash2Level("--fsm-info") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_DEBUG),		 (int)LConversion::Hash2Level("--fsm-debug") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_FORCE_DEBUG),		 (int)LConversion::Hash2Level("--fsm-force_debug") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_FATAL),		 (int)LConversion::Hash2Level("--message-fatal") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_FATAL),		 (int)LConversion::Hash2Level("--msg-fatal") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_ERROR),		 (int)LConversion::Hash2Level("--message-error") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_ERROR),		 (int)LConversion::Hash2Level("--msg-error") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_WARNING),		 (int)LConversion::Hash2Level("--message-warning") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_WARNING),		 (int)LConversion::Hash2Level("--msg-warning") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_INFO),		 (int)LConversion::Hash2Level("--message-info") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_INFO),		 (int)LConversion::Hash2Level("--msg-info") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_DEBUG),		 (int)LConversion::Hash2Level("--message-debug") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_DEBUG),		 (int)LConversion::Hash2Level("--msg-debug") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_FORCE_DEBUG),		 (int)LConversion::Hash2Level("--message-force_debug") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_FORCE_DEBUG),		 (int)LConversion::Hash2Level("--msg-force_debug") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_FATAL),		 (int)LConversion::Hash2Level("--com-fatal") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_ERROR),		 (int)LConversion::Hash2Level("--com-error") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_WARNING),		 (int)LConversion::Hash2Level("--com-warning") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_INFO),		 (int)LConversion::Hash2Level("--com-info") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_DEBUG),		 (int)LConversion::Hash2Level("--com-debug") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_FORCE_DEBUG),		 (int)LConversion::Hash2Level("--com-force_debug") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_FATAL),		 (int)LConversion::Hash2Level("--xml-fatal") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_ERROR),		 (int)LConversion::Hash2Level("--xml-error") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_WARNING),		 (int)LConversion::Hash2Level("--xml-warning") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_INFO),		 (int)LConversion::Hash2Level("--xml-info") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_DEBUG),		 (int)LConversion::Hash2Level("--xml-debug") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_FORCE_DEBUG),		 (int)LConversion::Hash2Level("--xml-force_debug") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_FATAL),		 (int)LConversion::Hash2Level("--database-fatal") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_FATAL),		 (int)LConversion::Hash2Level("--db-fatal") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_ERROR),		 (int)LConversion::Hash2Level("--database-error") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_ERROR),		 (int)LConversion::Hash2Level("--db-error") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_WARNING),		 (int)LConversion::Hash2Level("--database-warning") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_WARNING),		 (int)LConversion::Hash2Level("--db-warning") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_INFO),		 (int)LConversion::Hash2Level("--database-info") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_INFO),		 (int)LConversion::Hash2Level("--db-info") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_DEBUG),		 (int)LConversion::Hash2Level("--database-debug") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_DEBUG),		 (int)LConversion::Hash2Level("--db-debug") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_FORCE_DEBUG),		 (int)LConversion::Hash2Level("--database-force_debug") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_FORCE_DEBUG),		 (int)LConversion::Hash2Level("--db-force_debug") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_FATAL),		 (int)LConversion::Hash2Level("--user-fatal") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_FATAL),		 (int)LConversion::Hash2Level("--usr-fatal") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_ERROR),		 (int)LConversion::Hash2Level("--user-error") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_ERROR),		 (int)LConversion::Hash2Level("--usr-error") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_WARNING),		 (int)LConversion::Hash2Level("--user-warning") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_WARNING),		 (int)LConversion::Hash2Level("--usr-warning") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_INFO),		 (int)LConversion::Hash2Level("--user-info") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_INFO),		 (int)LConversion::Hash2Level("--usr-info") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_DEBUG),		 (int)LConversion::Hash2Level("--user-debug") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_DEBUG),		 (int)LConversion::Hash2Level("--usr-debug") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_FORCE_DEBUG),		 (int)LConversion::Hash2Level("--user-force_debug") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_FORCE_DEBUG),		 (int)LConversion::Hash2Level("--usr-force_debug") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_FATAL),		 (int)LConversion::Hash2Level("--general-fatal") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_FATAL),		 (int)LConversion::Hash2Level("--gen-fatal") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_ERROR),		 (int)LConversion::Hash2Level("--general-error") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_ERROR),		 (int)LConversion::Hash2Level("--gen-error") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_WARNING),		 (int)LConversion::Hash2Level("--general-warning") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_WARNING),		 (int)LConversion::Hash2Level("--gen-warning") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_INFO),		 (int)LConversion::Hash2Level("--general-info") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_INFO),		 (int)LConversion::Hash2Level("--gen-info") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_DEBUG),		 (int)LConversion::Hash2Level("--general-debug") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_DEBUG),		 (int)LConversion::Hash2Level("--gen-debug") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_FORCE_DEBUG),		 (int)LConversion::Hash2Level("--general-force_debug") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_FORCE_DEBUG),		 (int)LConversion::Hash2Level("--gen-force_debug") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_FATAL),		 (int)LConversion::Hash2Level("--alarm-fatal") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_ERROR),		 (int)LConversion::Hash2Level("--alarm-error") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_WARNING),		 (int)LConversion::Hash2Level("--alarm-warning") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_INFO),		 (int)LConversion::Hash2Level("--alarm-info") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_DEBUG),		 (int)LConversion::Hash2Level("--alarm-debug") );
    EXPECT_EQ(PAD(eLOGLEVEL::LOG_FORCE_DEBUG),		 (int)LConversion::Hash2Level("--alarm-force_debug") );
}


